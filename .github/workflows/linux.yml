name: linux

on: push

jobs:
  
  # clang-tidy:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Install software
  #       run: sudo apt install cmake -y
  #     - name: Checkout project
  #       uses: actions/checkout@v2
      
  # windows:
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       build-type: [Debug, Release]

  #   runs-on: windows-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v1

  #   - uses: ilammy/msvc-dev-cmd@v1

  #   - name: create build dir
  #     run: mkdir -p build

  #   # - name: Install gtest
  #   #   uses: MarkusJx/googletest-installer@v1.1

  #   - name: cmake
  #     run: cmake -S . -B build/ -G Ninja -D CMAKE_BUILD_TYPE=${{ matrix.build-type }}
  #       # -D BUILD_TESTING=ON 
  #       # -D BUILD_BENCHMARKS=ON

  #   - name: build
  #     run: cmake --build build/ --config ${{ matrix.build-type }}
    
  #   - name: test
  #     run: ctest -V -j $(nproc)
  # container:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout project
  #       uses: actions/checkout@v2
  #     - name: Get Dockerfile changed
  #       id: dockerfile-changed
  #       uses: tj-actions/changed-files@v35
  #       with:
  #         files: Dockerfile
  #     - uses: pmorelli92/github-container-registry-build-push@2.0.0
  #       if: steps.dockerfile-changed.outputs.any_changed == 'true'
  #       name: Build and Publish latest service image
  #       with:
  #         github-push-secret: ${{secrets.GITHUB_TOKEN}}
  #         docker-image-name: ghcr.io/schnellerhase/fvs_image
  #         # docker-image-tag: latest 
  #         dockerfile-path: Dockerfile
  #         # build-context: ./src/svc # optional
  #         build-only: false # optional

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: ubuntu-22.04
          #   CC: clang
          #   CXX: clang++
          #   build-type: Debug
          # - os: ubuntu-20.04
          #   CC: clang
          #   CXX: clang++
          #   build-type: Release
          # - os: ubuntu-22.04
          #   CC: gcc
          #   CXX: g++
          #   build-type: Debug
          - os: ubuntu-22.04
            CC: gcc
            CXX: g++
            build-type: Release
          # - os: macos-latest
          #   CC: clang
          #   CXX: clang++
          #   build-type: Debug
          # - os: macos-latest
          #   CC: clang
          #   CXX: clang++
          #   build-type: Release
          # - os: macos-latest
          #   CC: gcc
          #   CXX: g++
          #   build-type: Debug
          # - os: macos-latest
          #   CC: gcc
          #   CXX: g++
          #   build-type: Release

    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/schnellerhase/feedback-vertex-set-container-release:latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    # - name: Cache soplex/
    #   uses: actions/cache@v3
    #   with:
    #     path: soplex/
    #     key: build-soplex-ubuntu-${{ matrix.build-type }}
    #     restore-keys: soplex-dir-ubuntu-${{ matrix.build-type }}

    # - name: Cache scip/
    #   uses: actions/cache@v3
    #   with:
    #     path: scip/
    #     key: build-scip-ubuntu-${{ matrix.build-type }}
    #     restore-keys: scip-dir-ubuntu-${{ matrix.build-type }}

    # - name: Cache build/
    #   uses: actions/cache@v3
    #   with:
    #     path: build/
    #     key: build-dir-ubuntu-${{ matrix.build-type }}
    #     restore-keys: build-dir-ubuntu-${{ matrix.build-type }}

    # - name: Install Software
    #   run: |
    #     sudo apt-get update
    #     # sudo apt-get upgrade -y
    #     sudo apt-get install -y \
    #       build-essential \
    #       clang \
    #       clang-format \
    #       clang-tidy \
    #       cmake \
    #       git \
    #       lib32ncurses5-dev \
    #       libbenchmark-dev \
    #       libblas-dev \
    #       libboost-program-options-dev \
    #       libgmp3-dev \
    #       libgtest-dev \
    #       libreadline-dev \
    #       libz-dev \
    #       ninja-build \
    #       patchelf
  
    # - name: Install Soplex
    #   run: |
    #     if cd soplex; then git pull; cd ..; else git clone https://github.com/scipopt/soplex.git soplex; fi
    #     cd soplex
    #     cmake . -GNinja \
    #       -DBOOST=ON \
    #       -DBUILD_TESTING=OFF \
    #       -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
    #       -DGMP=OFF \
    #       -DMPFR=OFF \
    #       -DMT=OFF \
    #       -DPAPILO=OFF \
    #       -DQUADMATH=OFF \
    #       -DZLIB=ON
    #     sudo ninja install

    # - name: Install SCIP
    #   run: |
    #     if cd scip; then git pull; cd ..; else git clone https://github.com/scipopt/scip.git scip; fi
    #     cd scip
    #     cmake . -GNinja \
    #       -DAUTOBUILD=OFF \
    #       -DBUILD_TESTING=OFF \
    #       -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
    #       -DDEBUGSOL=OFF \
    #       -DGMP=ON \
    #       -DIPOPT=OFF \
    #       -DLPS=spx \
    #       -DLPSCHECK=OFF \
    #       -DPAPILO=OFF \
    #       -DPARASCIP=OFF \
    #       -DREADLINE=OFF \
    #       -DSHARED=ON \
    #       -DTHREADSAFE=ON \
    #       -DUSE_GMP=OFF \
    #       -DWORHP=OFF \
    #       -DZIMPL=OFF \
    #       -DZLIB=ON
    #     sudo ninja install

    # - name: Install software
    #   if: matrix.os == 'macOS-latest'
    #   run: brew install ninja googletest google-benchmark

    - name: cmake
      env:
        CC: ${{ matrix.CC }}
        CXX: ${{ matrix.CXX }}
      run: |
        mkdir -p build
        cd build
        cmake .. -GNinja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DBUILD_TESTING=ON \
          -DBUILD_BENCHMARKS=ON \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        ninja

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-dir-ubuntu-${{ matrix.build-type }}
        path: build/

    # - name: test
    #   working-directory: build
    #   run: ctest -V -j $(nproc)

    
  test:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: ubuntu-22.04
          #   CC: clang
          #   CXX: clang++
          #   build-type: Debug
          # - os: ubuntu-20.04
          #   CC: clang
          #   CXX: clang++
          #   build-type: Release
          # - os: ubuntu-22.04
          #   CC: gcc
          #   CXX: g++
          #   build-type: Debug
          - os: ubuntu-22.04
            CC: gcc
            CXX: g++
            build-type: Release
          # - os: macos-latest
          #   CC: clang
          #   CXX: clang++
          #   build-type: Debug
          # - os: macos-latest
          #   CC: clang
          #   CXX: clang++
          #   build-type: Release
          # - os: macos-latest
          #   CC: gcc
          #   CXX: g++
          #   build-type: Debug
          # - os: macos-latest
          #   CC: gcc
          #   CXX: g++
          #   build-type: Release
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/schnellerhase/feedback-vertex-set-container-release:latest
    steps:
      # - name: Cache build/
      #   uses: actions/cache@v3
      #   with:
      #     path: build/
      #     key: build-dir-ubuntu-${{ matrix.build-type }}
      #     restore-keys: build-dir-ubuntu-${{ matrix.build-type }}
      - name: Checkout
        uses: actions/checkout@v1
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-dir-ubuntu-${{ matrix.build-type }}
      - name: show
        run: ls -R
      - name: Test
        working-directory: build
        run: ctest -V -j $(nproc)

  clang-format:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install software
        run: sudo apt install clang-format -y
      - name: Checkout project
        uses: actions/checkout@v2
      - name: Check formatting
        run: find fvs -iname *.hpp -o -iname *.cpp -o -iname *.h | xargs clang-format -style=file --dry-run --Werror
  
  clang-tidy:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/schnellerhase/feedback-vertex-set-container-release:latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
      - name: cmake
        run: |
          mkdir build
          cd build
          cmake .. -GNinja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DBUILD_TESTING=ON \
          -DBUILD_BENCHMARKS=ON \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      - name: clang-tidy
        run: find fvs -iname *.hpp -o -iname *.cpp -o -iname *.h | xargs -P 0 -n 1 clang-tidy -p build -warnings-as-errors=*