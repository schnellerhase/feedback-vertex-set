name: CI

on: push

jobs:   
  build-linux:
    strategy:
      matrix:
        include:
          - build-type: Debug
            CC: clang
            CXX: clang++
          - build-type: Release
            CC: clang
            CXX: clang++
          - build-type: Debug
            CC: gcc
            CXX: g++
          - build-type: Release
            CC: gcc
            CXX: g++
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/schnellerhase/feedback-vertex-set-container-release:latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: cmake
      env:
        CC: ${{ matrix.CC }}
        CXX: ${{ matrix.CXX }}
      run: |
        mkdir -p build
        cd build
        cmake .. -GNinja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DBUILD_TESTING=ON \
          -DBUILD_BENCHMARKS=ON \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    - name: build
      working-directory: build
      run: ninja
    - name: Tar build directory
      run: tar -cvf build-dir.tar build/
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-dir-ubuntu-${{ matrix.build-type }}-${{ matrix.CXX }}
        path: build-dir.tar

  test-linux:
    needs: build-linux
    strategy:
      matrix:
        include:
          - build-type: Debug
            CC: clang
            CXX: clang++
          - build-type: Release
            CC: clang
            CXX: clang++
          - build-type: Debug
            CC: gcc
            CXX: g++
          - build-type: Release
            CC: gcc
            CXX: g++
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/schnellerhase/feedback-vertex-set-container-release:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-dir-ubuntu-${{ matrix.build-type }}-${{ matrix.CXX }}
      - name: unpack
        run: tar xvf build-dir.tar
      - name: Test
        env:
          LD_LIBRARY_PATH: /usr/local/lib
        working-directory: build
        run: ctest -V -j $(nproc)

  build-macos:
    strategy:
      matrix:
        build-type: [Debug, Release]
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install software
      run: brew install ninja googletest google-benchmark
    - name: cmake
      run: |
        mkdir -p build
        cd build
        cmake .. -GNinja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DBUILD_TESTING=ON \
          -DBUILD_BENCHMARKS=ON \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DFVS_USE_SYSTEM_SOPLEX=OFF \
          -DFVS_USE_SYSTEM_SCIP=OFF
    - name: build
      working-directory: build
      run: ninja
  #   - name: Tar build directory
  #     run: tar -cvf build-dir.tar build/
  #   - name: Upload Build Artifact
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: build-dir-macos-${{ matrix.build-type }}
  #       path: build-dir.tar
  # test-macos:
  #   needs: build-macos
  #   strategy:
  #     matrix:
  #       build-type: [Debug, Release]
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Install software
  #       run: brew install ninja googletest google-benchmark
  #     - name: Download Build Artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: build-dir-macos-${{ matrix.build-type }}
  #     - name: unpack
  #       run: tar xvf build-dir.tar
    - name: Test
      working-directory: build
      run: ctest -V -j $(nproc)
  
  windows-build:
    strategy:
      matrix:
        build-type: [Debug, Release]
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - uses: ilammy/msvc-dev-cmd@v1
    - name: create build dir
      run: mkdir -p build
    # - name: Install gtest
    #   uses: MarkusJx/googletest-installer@v1.1

    - name: cmake
      run: cmake -S . -B build/ -G Ninja -D CMAKE_BUILD_TYPE=${{ matrix.build-type }}
        # -D BUILD_TESTING=ON 
        # -D BUILD_BENCHMARKS=ON

    - name: build
      run: cmake --build build/ --config ${{ matrix.build-type }}
    
    - name: test
      run: ctest -V -j $(nproc)

  clang-format:
    runs-on: ubuntu-latest
    steps:
      - name: Install software
        run: sudo apt-get install clang-format -y
      - name: Checkout project
        uses: actions/checkout@v3
      - name: Check formatting
        run: find fvs -iname *.hpp -o -iname *.cpp -o -iname *.h | xargs clang-format -style=file --dry-run --Werror
  
  clang-tidy:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/schnellerhase/feedback-vertex-set-container-release:latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3
      - name: cmake
        run: |
          mkdir build
          cd build
          cmake .. -GNinja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DBUILD_TESTING=ON \
          -DBUILD_BENCHMARKS=ON \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      - name: clang-tidy
        run: find fvs -iname *.hpp -o -iname *.cpp -o -iname *.h | xargs -P 0 -n 1 clang-tidy -p build -warnings-as-errors=*

  benchmark:
    name: Performance regression check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # - name: Install Software
      #   run: |
      #     sudo apt update
      #     sudo apt install clang clang-format clang-tidy cmake ninja-build build-essential libgtest-dev libbenchmark-dev git -y

      # - name: create build dir
      #   run: mkdir -p build

      # - name: cmake
      #   working-directory: build
      #   run: |
      #     cmake .. -GNinja \
      #       -DCMAKE_BUILD_TYPE=Release \
      #       -DBUILD_BENCHMARKS=ON \

      # - name: ninja
      #   working-directory: build
      #   run: ninja benchmark_reduce

      - uses: actions/setup-go@v1
      # Run benchmark with `go test -bench` and stores the output to a file
      - name: Run benchmark
        working-directory: build
        run: ./benchmark_reduce --benchmark_format=json | tee benchmark_result.json
      # Download previous benchmark result from cache (if exists)
      - name: Download previous benchmark data
        uses: actions/cache@v1
        with:
          path: ./cache
          key: ${{ runner.os }}-benchmark
      # Run `github-action-benchmark` action
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          # What benchmark tool the output.txt came from
          tool: 'googlecpp'
          # Where the output from the benchmark tool is stored
          output-file-path: benchmark_result.json
          # Where the previous data file is stored
          external-data-json-path: ./cache/benchmark-data.json
          # Workflow will fail when an alert happens
          fail-on-alert: true
      # Upload the updated cache file for the next job by actions/cache
