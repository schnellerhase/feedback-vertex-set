name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  macos:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        build-type: [Debug, Release]

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Install software
      run: brew install ninja googletest google-benchmark

    - name: create build dir
      run: mkdir -p build

    - name: cmake
      working-directory: build
      run: |
        cmake .. -GNinja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DBUILD_TESTING=ON \
          -DBUILD_BENCHMARKS=ON \

    - name: ninja
      working-directory: build
      run: ninja
    
    - name: test
      working-directory: build
      run: ctest -V -j $(nproc)

  windows:
    strategy:
      fail-fast: true
      matrix:
        os: [windows-latest]
        build-type: [Debug, Release]

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - uses: ilammy/msvc-dev-cmd@v1

    - name: create build dir
      run: mkdir -p build

    - name: cmake
      working-directory: build
      run: |
        cmake \
          -DBUILD_TESTING=ON \
          -DBUILD_BENCHMARKS=ON \
          .. \

    - name: ninja
      working-directory: build
      run: ninja

  ubuntu:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        compiler:
          - { compiler: GNU,  CC: gcc,   CXX: g++ }
          - { compiler: LLVM, CC: clang, CXX: clang++ }
        build-type: [Debug, Release]

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    
    - name: Installing Software
      run: |
        sudo apt update
        sudo apt install clang clang-format clang-tidy cmake ninja-build build-essential libgtest-dev libbenchmark-dev git -y

    - name: create build dir
      run: mkdir -p build

    - name: cmake
      working-directory: build
      env:
        CC: ${{ matrix.compiler.CC }}
        CXX: ${{ matrix.compiler.CXX }}
      run: |
        cmake .. -GNinja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DBUILD_TESTING=ON \
          -DBUILD_BENCHMARKS=ON \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \

    - name: ninja
      working-directory: build
      run: ninja

    - name: test
      working-directory: build
      run: ctest -V -j $(nproc)

    - name: clang-format
      if: ${{ ( success() || failure() ) && matrix.build-type ==  'Release' && matrix.compiler == 'GNU' }}
      run: find src -iname *.hpp -o -iname *.cpp -o -iname *.h | xargs clang-format -style=file --dry-run --Werror

    - name: clang-tidy
      if: ${{ ( success() || failure() ) && matrix.build-type ==  'Release' && matrix.compiler == 'GNU' }}
      run: find src -iname *.hpp -o -iname *.cpp -o -iname *.h | xargs -P 0 -n 1 clang-tidy -p build -warnings-as-errors=*
