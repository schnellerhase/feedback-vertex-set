name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  # windows:
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       build-type: [Debug, Release]

  #   runs-on: windows-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v1

  #   - uses: ilammy/msvc-dev-cmd@v1

  #   - name: create build dir
  #     run: mkdir -p build

  #   # - name: Install gtest
  #   #   uses: MarkusJx/googletest-installer@v1.1

  #   - name: cmake
  #     run: cmake -S . -B build/ -G Ninja -D CMAKE_BUILD_TYPE=${{ matrix.build-type }}
  #       # -D BUILD_TESTING=ON 
  #       # -D BUILD_BENCHMARKS=ON

  #   - name: build
  #     run: cmake --build build/ --config ${{ matrix.build-type }}
    
  #   - name: test
  #     run: ctest -V -j $(nproc)
  container:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      # - name: Build image
      #   run: |
      #     docker build -t fvs_image:latest - < Dockerfile

      # - name: Upload image
      #   uses: ishworkh/docker-image-artifact-upload@v1
      #   with:
      #     image: "fvs_image:latest"

      - uses: pmorelli92/github-container-registry-build-push@2.0.0
        name: Build and Publish latest service image
        with:
          github-push-secret: ${{secrets.GITHUB_TOKEN}}
          docker-image-name: my-svc
          docker-image-tag: latest # optional
          dockerfile-path: Dockerfile # optional
          # build-context: ./src/svc # optional
          build-only: false # optional

  unix:
    needs: [container]
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: ubuntu-22.04
          #   CC: clang
          #   CXX: clang++
          #   build-type: Debug
          - os: ubuntu-20.04
            CC: clang
            CXX: clang++
            build-type: Release
          # - os: ubuntu-22.04
          #   CC: gcc
          #   CXX: g++
          #   build-type: Debug
          # - os: ubuntu-22.04
          #   CC: gcc
          #   CXX: g++
          #   build-type: Release
          # - os: macos-latest
          #   CC: clang
          #   CXX: clang++
          #   build-type: Debug
          # - os: macos-latest
          #   CC: clang
          #   CXX: clang++
          #   build-type: Release
          # - os: macos-latest
          #   CC: gcc
          #   CXX: g++
          #   build-type: Debug
          # - os: macos-latest
          #   CC: gcc
          #   CXX: g++
          #   build-type: Release

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Download image
      uses: ishworkh/docker-image-artifact-download@v1
      with:
        image: "fvs_image:latest"

    - name: Install Software
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        # sudo apt-get upgrade -y
        sudo apt-get install -y \
          build-essential \
          clang \
          clang-format \
          clang-tidy \
          cmake \
          git \
          lib32ncurses5-dev \
          libbenchmark-dev \
          libblas-dev \
          libboost-program-options-dev \
          libgmp3-dev \
          libgtest-dev \
          libreadline-dev \
          libz-dev \
          ninja-build \
          patchelf
        wget -q --no-check-certificate --post-data "tname=blub&email=blub%40gmail.com&inst=&city=&country=blub" https://scipopt.org/download.php?fname=SCIPOptSuite-8.0.3-Linux-ubuntu.deb -O scipoptsuite.deb
        sudo apt-get install ./scipoptsuite.deb

    - name: Install software
      if: matrix.os == 'macOS-latest'
      run: brew install ninja googletest google-benchmark

    - name: cmake
      # working-directory: build
      env:
        CC: ${{ matrix.CC }}
        CXX: ${{ matrix.CXX }}
      run: |
        mkdir build
        cd build
        cmake .. -GNinja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DBUILD_TESTING=ON \
          -DBUILD_BENCHMARKS=ON \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \

    - name: ninja
      working-directory: build
      run: ninja

    - name: test
      working-directory: build
      run: ctest -V -j $(nproc)

    - name: clang-format
      if: ${{ ( success() || failure() ) && matrix.os == 'ubuntu-22.04' && matrix.build-type == 'Release' && matrix.cxx == 'g++' }}
      run: find fvs -iname *.hpp -o -iname *.cpp -o -iname *.h | xargs clang-format -style=file --dry-run --Werror

    - name: clang-tidy
      if: ${{ ( success() || failure() ) && matrix.os == 'ubuntu-22.04' && matrix.build-type == 'Release' && matrix.cxx == 'g++' }}
      run: find fvs -iname *.hpp -o -iname *.cpp -o -iname *.h | xargs -P 0 -n 1 clang-tidy -p build -warnings-as-errors=*
